import os
from os import path
import sys
import getopt
import rdkit
from rdkit import Chem
import pandas as pd
import numpy as np
import subprocess
import argparse
from DFT_utils import b2bf
import time
import signal
from rdkit import Chem
from rdkit.Chem import AllChem

def mk_xyz_from_smiles_string(smiles,filename,numConfs=1,conf_id=False,randomseed=0xf00d):
    
    """
    Creates an xyz textfile from a smiles string. The output format of the xyz file is the
    same as what is made by open babel even though RDkit is used.
    Parameters
    ----------
    smiles: smiles string
    filename: path, including name of file (without xyz extension), of the xyz file to be 
            written.
            
    numConfs: number of conformers to be generated by RDkit. Default is 1 but it is recommended 
            to generate more and pick the lowest energy converged conformer.
            
    conf_id: of the generated conformers, conf_id species the geometry of which conformer to use 
            to generate the xyz file.
            
    randomseed: A random seed is used to generate conformers. For reproducability we set it to a
                default value.
    
    Returns
    -------
    Textfile in a .xyz format containing MMFF optimized conformers.
    """
    
    mol=Chem.MolFromSmiles(smiles)
    mol=Chem.AddHs(mol)
    cids = AllChem.EmbedMultipleConfs(mol, numConfs=numConfs,randomSeed=randomseed)
    res = AllChem.MMFFOptimizeMoleculeConfs(mol,numThreads=0)
    if conf_id ==False: #If False the lowest energy converged conformer ID is used
        
        res_converged=[v for i,v in enumerate(res) if res[i][0]==0]
        conf_id=res.index(min(res_converged, key = lambda t: t[1]))
    xyz=get_xyz_from_mol(mol,confid=conf_id) #gets an array of xyz values
    write_xyz_from_xyz_arr(xyz,filename) #Writes xyz text file
    

def get_xyz_from_mol(mol,confid=0,randomseed=0xf00d):
    """Extracts a numpy array of coordinates from a molecules.
    Returns a `(N, 3)` numpy array of 3d coords of given rdkit molecule
    Parameters
    ----------
    mol: rdkit Molecule
    Molecule to extract coordinates for
    Returns
    -------
    Numpy ndarray of shape `(N, 3)` where `N = mol.GetNumAtoms()`.
    """

    xyz = np.zeros((mol.GetNumAtoms(), 4),dtype=object)
    
    if confid is not None:
        conf = mol.GetConformer(id=confid)
    else:
        conf = mol.GetConformer()
    atoms=mol.GetAtoms()
    for i in range(conf.GetNumAtoms()):
        position = conf.GetAtomPosition(i)
        atom=mol.GetAtomWithIdx(i)
        xyz[i,0] = atom.GetSymbol()
        xyz[i, 1] = position.x
        xyz[i, 2] = position.y
        xyz[i, 3] = position.z
    return (xyz)

def write_xyz_from_xyz_arr(xyz,filename):
    """Writes an XYZ text file from and xyz array given by get_xyz_from_mol.
    The ouput format exactly matches the format given by open babel.
    ----------
    xyz: numpy array of shape `(N, 3)` where `N = mol.GetNumAtoms()
    filename: path to .xyz text file
    Molecule to extract coordinates for
    Returns
    -------
    .xyz text file containing atom lables and x,y,z coordinates.
    """    
    #might have to make filename jus the full path
    writepath = os.path.join(os.getcwd(),f'{filename}.xyz')
    mode = 'a' if os.path.exists(writepath) else 'w'
    with open(writepath, mode) as f:
        f.truncate(0)
        
        n,m=np.shape(xyz)
        f.write('\n')
        f.write('\n')
        for i in range(n):
            f.write(f'{xyz[i,0]}{xyz[i,1]:>17,.6f}{xyz[i,2]:>15,.6f}{xyz[i,3]:>15,.6f}\n')
        f.close()
    



def mk_xyz_from_smi(rn,software='obabel'):
    if software=='obabel':
        command=f'obabel -ismi {rn}.smi -oxyz -O {rn}.xyz --gen3d'
        #pro=subprocess.Popen(command,shell=True,stdout=subprocess.PIPE,preexec_fn=os.setsid) #Using shell=True is a security hazard but I did it this way because I was being lazy
        pro=subprocess.Popen(command,shell=True) #Using shell=True is a security hazard but I did it this way because I was being lazy

        try:
            pro.wait(timeout=1)
        except subprocess.TimeoutExpired:
            pro.kill()
    elif software=='rdkit':
        pass
        
def combine_labels_and_xyz(labels : list, xyz : list) -> np.ndarray:
    
    """Combines a list of atom labels and list of lists of 3D coordinates
    into a single N x D+1 np array which can be used in the function
    write_xyz_from_xyz_arr()
    ----------
    labels: List of atom labels, usually of size (N,). Each label should
    be a string
    
    xyz: List of lists of atom coordinates, each inner list contains a the 3
    coordinates of atom i. ie [[0,0,0,],[1,1,1]] for 2 atoms with coordinates (0,0,0)
    and (1,1,1)
    -------
    
    returns a combined numpy array of size N x D+1 where the first column are the labels
    and the remaining columns are the cooridnates, much like a .xyz file
    """ 
    
    
    
    arr1,arr2= np.expand_dims(labels,1),np.array(xyz) #This unflattens the labels array 
    
    n,d=np.shape(np.array(arr2))
    arr=np.empty((n,d+1),dtype='object')
    arr[:,[0]]=arr1
    arr[:,1:]=arr2
    
    return arr  
    

